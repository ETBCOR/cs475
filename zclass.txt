// BUILD THE KD-TREE
// sort by column c
// median is middle of sorted list
// call build with the left side and c+1
// call build with the right side and c+1

// SEARCH THE KD-TREE

// if leaf node case
//     if better bestrow saw that as new bestnode

// if parent node case
//     if is iten left of split point?
//         do left then right
//             call search on left -> bestrow and best
//             if dist(best) in dimension c > best then return
//             call search(best) on right
//     else
//         do right the left
//     do split point (parent)
//         if better bestrow save that as new bestnode
